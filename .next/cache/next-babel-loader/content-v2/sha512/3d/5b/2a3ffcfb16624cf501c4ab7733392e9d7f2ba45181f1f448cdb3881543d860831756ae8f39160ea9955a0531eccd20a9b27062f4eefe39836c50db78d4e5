{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport _defineProperty from \"C:/Users/prosenjit/omnireact/stormy-dusk-22997/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport Router from 'next/router';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nvar initial = {\n  lat: '',\n  lng: ''\n};\n\nfunction LocationSearchInputFun() {\n  var _useState = useState(''),\n      address = _useState[0],\n      setAddress = _useState[1];\n\n  var _useState2 = useState(initial),\n      latLng = _useState2[0],\n      setLatLng = _useState2[1];\n\n  var handleChange = function handleChange(address) {\n    setAddress(address);\n  };\n\n  var handleChangeLatLng = function handleChangeLatLng(latLngObj) {\n    setLatLng(latLngObj);\n  };\n\n  var handleSelect = function handleSelect(address) {\n    geocodeByAddress(address).then(function (results) {\n      return getLatLng(results[0]);\n    }).then(function (latLng) {\n      setAddress(address);\n      setLatLng(latLng);\n      localStorage.setItem('latitude', latLng.lat);\n      localStorage.setItem('longitude', latLng.lng);\n      console.log('Success', latLng);\n      Router.push('/');\n    })[\"catch\"](function (error) {\n      setLatLng({});\n      console.error('Error', error);\n    });\n  };\n\n  return /*#__PURE__*/_jsx(PlacesAutocomplete, {\n    value: address,\n    onChange: handleChange,\n    onSelect: handleSelect,\n    children: function children(_ref) {\n      var getInputProps = _ref.getInputProps,\n          suggestions = _ref.suggestions,\n          getSuggestionItemProps = _ref.getSuggestionItemProps,\n          loading = _ref.loading;\n      return /*#__PURE__*/_jsxs(\"div\", {\n        children: [/*#__PURE__*/_jsx(\"input\", _objectSpread({}, getInputProps({\n          placeholder: 'Search Places ...',\n          className: 'location-search-input'\n        }))), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"autocomplete-dropdown-container\",\n          children: [loading && /*#__PURE__*/_jsx(\"div\", {\n            children: \"Loading...\"\n          }), suggestions.map(function (suggestion, i) {\n            var className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n            var style = suggestion.active ? {\n              backgroundColor: '#fafafa',\n              cursor: 'pointer'\n            } : {\n              backgroundColor: '#ffffff',\n              cursor: 'pointer'\n            };\n            return /*#__PURE__*/_jsx(\"div\", _objectSpread(_objectSpread({}, getSuggestionItemProps(suggestion, {\n              className: className,\n              style: style\n            })), {}, {\n              children: /*#__PURE__*/_jsx(\"span\", {\n                children: suggestion.description\n              })\n            }), i);\n          })]\n        })]\n      });\n    }\n  });\n}\n\nexport default LocationSearchInputFun;","map":null,"metadata":{},"sourceType":"module"}