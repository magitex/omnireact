{"ast":null,"code":"import Repository, { baseUrl, serializeQuery } from './Repository';\n\nclass ProductRepository {\n  async getRecords(params) {\n    const reponse = await Repository.get(`${baseUrl}/products?${serializeQuery(params)}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProducts(params) {\n    const reponse = await Repository.get(`${baseUrl}/products?${serializeQuery(params)}`).then(response => {\n      return {\n        items: response.data,\n        totalItems: response.data.length\n      };\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getBrands() {\n    const reponse = await Repository.get(`${baseUrl}/brands`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductCategories() {\n    const reponse = await Repository.get(`${baseUrl}/product-categories`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getTotalRecords() {\n    const reponse = await Repository.get(`${baseUrl}/products/count`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductsById(payload) {\n    const reponse = await Repository.get(`${baseUrl}/products/${payload}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductsByCategory(payload) {\n    const reponse = await Repository.get(`${baseUrl}/product-categories?slug=${payload}`).then(response => {\n      if (response.data) {\n        if (response.data.length > 0) {\n          return response.data[0];\n        }\n      } else {\n        return null;\n      }\n    }).catch(() => {\n      return null;\n    });\n    return reponse;\n  }\n\n  async getProductsByBrand(payload) {\n    const reponse = await Repository.get(`${baseUrl}/brands?slug=${payload}`).then(response => {\n      if (response.data) {\n        if (response.data.length > 0) {\n          return response.data[0];\n        }\n      } else {\n        return null;\n      }\n    }).catch(() => {\n      return null;\n    });\n    return reponse;\n  }\n\n  async getProductsByBrands(payload) {\n    let query = '';\n    payload.forEach(item => {\n      if (query === '') {\n        query = `id_in=${item}`;\n      } else {\n        query = query + `&id_in=${item}`;\n      }\n    });\n    const reponse = await Repository.get(`${baseUrl}/brands?${query}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductsByBrands(payload) {\n    let query = '';\n    payload.forEach(item => {\n      if (query === '') {\n        query = `id_in=${item}`;\n      } else {\n        query = query + `&id_in=${item}`;\n      }\n    });\n    const reponse = await Repository.get(`${baseUrl}/brands?${query}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n  async getProductsByPriceRange(payload) {\n    const reponse = await Repository.get(`${baseUrl}/products?${serializeQuery(payload)}`).then(response => {\n      return response.data;\n    }).catch(error => ({\n      error: JSON.stringify(error)\n    }));\n    return reponse;\n  }\n\n}\n\nexport default new ProductRepository();","map":{"version":3,"sources":["C:/Users/prosenjit/omnireact/stormy-dusk-22997/repositories/ProductRepository.js"],"names":["Repository","baseUrl","serializeQuery","ProductRepository","getRecords","params","reponse","get","then","response","data","catch","error","JSON","stringify","getProducts","items","totalItems","length","getBrands","getProductCategories","getTotalRecords","getProductsById","payload","getProductsByCategory","getProductsByBrand","getProductsByBrands","query","forEach","item","getProductsByPriceRange"],"mappings":"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","sourcesContent":["import Repository, { baseUrl, serializeQuery } from './Repository';\r\n\r\nclass ProductRepository {\r\n    async getRecords(params) {\r\n        const reponse = await Repository.get(\r\n            `${baseUrl}/products?${serializeQuery(params)}`\r\n        )\r\n            .then((response) => {\r\n                return response.data;\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getProducts(params) {\r\n        const reponse = await Repository.get(\r\n            `${baseUrl}/products?${serializeQuery(params)}`\r\n        )\r\n            .then((response) => {\r\n                return {\r\n                    items: response.data,\r\n                    totalItems: response.data.length,\r\n                };\r\n            })\r\n\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getBrands() {\r\n        const reponse = await Repository.get(`${baseUrl}/brands`)\r\n            .then((response) => {\r\n                return response.data;\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getProductCategories() {\r\n        const reponse = await Repository.get(`${baseUrl}/product-categories`)\r\n            .then((response) => {\r\n                return response.data;\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getTotalRecords() {\r\n        const reponse = await Repository.get(`${baseUrl}/products/count`)\r\n            .then((response) => {\r\n                return response.data;\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getProductsById(payload) {\r\n        const reponse = await Repository.get(`${baseUrl}/products/${payload}`)\r\n            .then((response) => {\r\n                return response.data;\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getProductsByCategory(payload) {\r\n        const reponse = await Repository.get(\r\n            `${baseUrl}/product-categories?slug=${payload}`\r\n        )\r\n            .then((response) => {\r\n                if (response.data) {\r\n                    if (response.data.length > 0) {\r\n                        return response.data[0];\r\n                    }\r\n                } else {\r\n                    return null;\r\n                }\r\n            })\r\n            .catch(() => {\r\n                return null;\r\n            });\r\n        return reponse;\r\n    }\r\n    async getProductsByBrand(payload) {\r\n        const reponse = await Repository.get(\r\n            `${baseUrl}/brands?slug=${payload}`\r\n        )\r\n            .then((response) => {\r\n                if (response.data) {\r\n                    if (response.data.length > 0) {\r\n                        return response.data[0];\r\n                    }\r\n                } else {\r\n                    return null;\r\n                }\r\n            })\r\n            .catch(() => {\r\n                return null;\r\n            });\r\n        return reponse;\r\n    }\r\n\r\n    async getProductsByBrands(payload) {\r\n        let query = '';\r\n        payload.forEach((item) => {\r\n            if (query === '') {\r\n                query = `id_in=${item}`;\r\n            } else {\r\n                query = query + `&id_in=${item}`;\r\n            }\r\n        });\r\n        const reponse = await Repository.get(`${baseUrl}/brands?${query}`)\r\n            .then((response) => {\r\n                return response.data;\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getProductsByBrands(payload) {\r\n        let query = '';\r\n        payload.forEach((item) => {\r\n            if (query === '') {\r\n                query = `id_in=${item}`;\r\n            } else {\r\n                query = query + `&id_in=${item}`;\r\n            }\r\n        });\r\n        const reponse = await Repository.get(`${baseUrl}/brands?${query}`)\r\n            .then((response) => {\r\n                return response.data;\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n\r\n    async getProductsByPriceRange(payload) {\r\n        const reponse = await Repository.get(\r\n            `${baseUrl}/products?${serializeQuery(payload)}`\r\n        )\r\n            .then((response) => {\r\n                return response.data;\r\n            })\r\n            .catch((error) => ({ error: JSON.stringify(error) }));\r\n        return reponse;\r\n    }\r\n}\r\n\r\nexport default new ProductRepository();\r\n"]},"metadata":{},"sourceType":"module"}