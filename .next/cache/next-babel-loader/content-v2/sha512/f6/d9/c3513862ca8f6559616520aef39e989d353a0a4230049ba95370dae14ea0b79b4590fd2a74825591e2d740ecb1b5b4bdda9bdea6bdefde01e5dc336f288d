{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from 'react';\nimport Link from 'next/link';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete';\nconst initial = {\n  lat: '',\n  lng: ''\n};\n\nfunction LocationSearchInputFun() {\n  const {\n    0: address,\n    1: setAddress\n  } = useState('');\n  const {\n    0: latLng,\n    1: setLatLng\n  } = useState(initial);\n\n  const handleChange = address => {\n    setAddress(address);\n  };\n\n  const handleChangeLatLng = latLngObj => {\n    setLatLng(latLngObj);\n  };\n\n  const handleSelect = address => {\n    geocodeByAddress(address).then(results => getLatLng(results[0])).then(latLng => {\n      setAddress(address);\n      setLatLng(latLng);\n      localStorage.setItem('latitude', latLng.lat);\n      localStorage.setItem('longitude', latLng.lng);\n      Router.push('/');\n      console.log('Success', latLng);\n    }).catch(error => {\n      setLatLng({});\n      console.error('Error', error);\n    });\n  };\n\n  return /*#__PURE__*/_jsx(PlacesAutocomplete, {\n    value: address,\n    onChange: handleChange,\n    onSelect: handleSelect,\n    children: ({\n      getInputProps,\n      suggestions,\n      getSuggestionItemProps,\n      loading\n    }) => /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"input\", _objectSpread({}, getInputProps({\n        placeholder: 'Search Places ...',\n        className: 'location-search-input'\n      }))), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"autocomplete-dropdown-container\",\n        children: [loading && /*#__PURE__*/_jsx(\"div\", {\n          children: \"Loading...\"\n        }), suggestions.map((suggestion, i) => {\n          const className = suggestion.active ? 'suggestion-item--active' : 'suggestion-item'; // inline style for demonstration purpose\n\n          const style = suggestion.active ? {\n            backgroundColor: '#fafafa',\n            cursor: 'pointer'\n          } : {\n            backgroundColor: '#ffffff',\n            cursor: 'pointer'\n          };\n          return /*#__PURE__*/_jsx(\"div\", _objectSpread(_objectSpread({}, getSuggestionItemProps(suggestion, {\n            className,\n            style\n          })), {}, {\n            children: /*#__PURE__*/_jsx(\"span\", {\n              children: suggestion.description\n            })\n          }), i);\n        })]\n      })]\n    })\n  });\n}\n\nexport default LocationSearchInputFun;","map":null,"metadata":{},"sourceType":"module"}