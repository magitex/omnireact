{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _classCallCheck from \"C:/Users/prosenjit/omnireact/stormy-dusk-22997/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/prosenjit/omnireact/stormy-dusk-22997/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/prosenjit/omnireact/stormy-dusk-22997/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/prosenjit/omnireact/stormy-dusk-22997/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"C:/Users/prosenjit/omnireact/stormy-dusk-22997/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:/Users/prosenjit/omnireact/stormy-dusk-22997/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"C:/Users/prosenjit/omnireact/stormy-dusk-22997/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nimport Helper from '~/components/helpers/networks';\nimport { HomeContext } from '~/components/helpers/context';\nimport { notification } from 'antd';\nGeocode.setApiKey(\"AIzaSyDPgRKAUNl2uKfGyLSxfcXLKS2hT0v3h7Y\"); //Geocode.enableDebug();\n\nvar Map = /*#__PURE__*/function (_React$Component) {\n  _inherits(Map, _React$Component);\n\n  var _super = _createSuper(Map);\n\n  function Map(props) {\n    var _this;\n\n    _classCallCheck(this, Map);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"getCurrentLocation\", function (lati, lngi) {\n      _this.setState({\n        visibility: true,\n        markerPosition: {\n          lat: lati,\n          lng: lngi\n        },\n        mapPosition: {\n          lat: lati,\n          lng: lngi\n        }\n      });\n\n      Geocode.fromLatLng(_this.state.mapPosition.lat, _this.state.mapPosition.lng).then(function (response) {\n        var address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = _this.getCity(addressArray),\n            area = _this.getArea(addressArray),\n            state = _this.getState(addressArray),\n            pinCode = _this.getpinCode(addressArray);\n\n        console.log('city', city, area, state, pinCode);\n\n        _this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : '',\n          pinCode: pinCode ? pinCode : ''\n        });\n      }, function (error) {\n        console.error(error);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getCity\", function (addressArray) {\n      var city = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getpinCode\", function (addressArray) {\n      var pinCode = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'postal_code' === addressArray[i].types[0]) {\n          pinCode = addressArray[i].long_name;\n          return pinCode;\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getArea\", function (addressArray) {\n      var area = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (var j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getState\", function (addressArray) {\n      console.log('completeaddrsss', addressArray);\n      var state = '';\n\n      for (var i = 0; i < addressArray.length; i++) {\n        for (var _i = 0; _i < addressArray.length; _i++) {\n          if (addressArray[_i].types[0] && 'administrative_area_level_1' === addressArray[_i].types[0]) {\n            state = addressArray[_i].long_name;\n            return state;\n          }\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (event) {\n      _this.setState(_defineProperty({}, event.target.name, event.target.value));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onInfoWindowClose\", function (event) {});\n\n    _defineProperty(_assertThisInitialized(_this), \"onPlaceSelected\", function (place) {\n      var address = place.formatted_address,\n          addressArray = place.address_components,\n          city = _this.getCity(addressArray),\n          area = _this.getArea(addressArray),\n          state = _this.getState(addressArray),\n          pinCode = _this.getpinCode(addressArray),\n          latValue = place.geometry.location.lat(),\n          lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n\n      _this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        visibility: true,\n        pinCode: pinCode ? pinCode : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"modalSuccess\", function (type) {\n      notification[type]({\n        message: 'Success',\n        description: 'This address is saved!',\n        duration: 20\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSubmit\", function (event) {\n      var data;\n      event.preventDefault();\n      var token = Helper.getToken();\n      data = Helper.saveUserAddress(_this.state);\n      console.log('city', _this.state);\n      console.log('return', data);\n\n      _this.modalSuccess('success'); //this.yarn();\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMarkerDragEnd\", function (event) {\n      console.log('event', event);\n      var newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(function (response) {\n        var address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = _this.getCity(addressArray),\n            area = _this.getArea(addressArray),\n            state = _this.getState(addressArray),\n            pinCode = _this.getpinCode(addressArray);\n\n        _this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : '',\n          pinCode: pinCode ? pinCode : ''\n        });\n      }, function (error) {\n        console.error(error);\n      });\n    });\n\n    _this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      pinCode: '',\n      type: 'Home',\n      mapPosition: {\n        lat: _this.props.center.lat,\n        lng: _this.props.center.lng\n      },\n      markerPosition: {\n        lat: _this.props.center.lat,\n        lng: _this.props.center.lng\n      },\n      visibility: _this.props.visibility\n    };\n    return _this;\n  }\n  /**\r\n  * Get the current address from the default map position and set those values in the state\r\n  */\n\n\n  _createClass(Map, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(function (response) {\n        var address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = _this2.getCity(addressArray),\n            area = _this2.getArea(addressArray),\n            state = _this2.getState(addressArray),\n            pinCode = _this2.getpinCode(addressArray);\n\n        console.log('city', city, area, state, pinCode);\n\n        _this2.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : '',\n          pinCode: pinCode ? pinCode : ''\n        });\n      }, function (error) {\n        console.error(error);\n      });\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n\n    /**\r\n    * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n    *\r\n    * @param nextProps\r\n    * @param nextState\r\n    * @return {boolean}\r\n    */\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state || this.state.pinCode !== nextState.pinCode) {\n        return true;\n      } else if (this.props.center.lat === nextProps.center.lat) {\n        return false;\n      } else return true;\n    }\n    /**\r\n    * Get the city and set the city input value to the one selected\r\n    *\r\n    * @param addressArray\r\n    * @return {string}\r\n    */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var AsyncMap = withScriptjs(withGoogleMap(function (props) {\n        return /*#__PURE__*/_jsxs(_Fragment, {\n          children: [_this3.state.visibility === true ? /*#__PURE__*/_jsxs(GoogleMap, {\n            google: _this3.state.visibility === true ? _this3.props.google : {},\n            defaultZoom: _this3.state.visibility === true ? _this3.props.zoom : 0,\n            defaultCenter: _this3.state.visibility === true ? {\n              lat: _this3.state.mapPosition.lat,\n              lng: _this3.state.mapPosition.lng\n            } : {},\n            children: [/*#__PURE__*/_jsx(Marker, {\n              google: _this3.props.google,\n              name: 'Dolores park',\n              draggable: true,\n              onDragEnd: _this3.onMarkerDragEnd,\n              position: {\n                lat: _this3.state.markerPosition.lat,\n                lng: _this3.state.markerPosition.lng\n              }\n            }), /*#__PURE__*/_jsx(Marker, {}), /*#__PURE__*/_jsx(InfoWindow, {\n              onClose: _this3.onInfoWindowClose,\n              position: {\n                lat: _this3.state.markerPosition.lat + 0.0018,\n                lng: _this3.state.markerPosition.lng\n              },\n              children: /*#__PURE__*/_jsx(\"div\", {\n                children: /*#__PURE__*/_jsx(\"span\", {\n                  style: {\n                    padding: 0,\n                    margin: 0\n                  },\n                  children: _this3.state.address\n                })\n              })\n            })]\n          }) : /*#__PURE__*/_jsx(\"div\", {}), \" \"]\n        });\n      }));\n      var map;\n\n      if (this.props.center.lat !== undefined) {\n        map = /*#__PURE__*/_jsxs(\"div\", {\n          children: [this.state.visibility == true ? /*#__PURE__*/_jsxs(\"form\", {\n            onSubmit: this.handleSubmit,\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              children: [/*#__PURE__*/_jsxs(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsx(\"label\", {\n                  htmlFor: \"\",\n                  children: \"City\"\n                }), /*#__PURE__*/_jsx(\"input\", {\n                  type: \"text\",\n                  name: \"city\",\n                  className: \"form-control\",\n                  onChange: this.onChange,\n                  readOnly: \"readOnly\",\n                  value: this.state.city\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsx(\"label\", {\n                  htmlFor: \"\",\n                  children: \"Area\"\n                }), /*#__PURE__*/_jsx(\"input\", {\n                  type: \"text\",\n                  name: \"area\",\n                  className: \"form-control\",\n                  onChange: this.onChange,\n                  readOnly: \"readOnly\",\n                  value: this.state.area\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsx(\"label\", {\n                  htmlFor: \"\",\n                  children: \"Pin Code\"\n                }), /*#__PURE__*/_jsx(\"input\", {\n                  type: \"text\",\n                  name: \"pinCode\",\n                  className: \"form-control\",\n                  onChange: this.onChange,\n                  readOnly: \"readOnly\",\n                  value: this.state.pinCode\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsx(\"label\", {\n                  htmlFor: \"\",\n                  children: \"State\"\n                }), /*#__PURE__*/_jsx(\"input\", {\n                  type: \"text\",\n                  name: \"state\",\n                  className: \"form-control\",\n                  onChange: this.onChange,\n                  readOnly: \"readOnly\",\n                  value: this.state.state\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsx(\"label\", {\n                  htmlFor: \"\",\n                  children: \"Address\"\n                }), /*#__PURE__*/_jsx(\"input\", {\n                  type: \"text\",\n                  name: \"address\",\n                  className: \"form-control\",\n                  onChange: this.onChange,\n                  readOnly: \"readOnly\",\n                  value: this.state.address\n                })]\n              }), /*#__PURE__*/_jsxs(\"div\", {\n                className: \"form-group\",\n                children: [/*#__PURE__*/_jsx(\"label\", {\n                  htmlFor: \"\",\n                  children: \"Address Save As\"\n                }), /*#__PURE__*/_jsx(\"input\", {\n                  type: \"radio\",\n                  name: \"type\",\n                  className: \"form-control\",\n                  onChange: this.onChange,\n                  value: \"Home\",\n                  checked: true\n                }), \"Home \", /*#__PURE__*/_jsx(\"input\", {\n                  type: \"radio\",\n                  name: \"type\",\n                  className: \"form-control\",\n                  onChange: this.onChange,\n                  value: \"Work\"\n                }), \"Work\", /*#__PURE__*/_jsx(\"input\", {\n                  type: \"radio\",\n                  name: \"type\",\n                  className: \"form-control\",\n                  onChange: this.onChange,\n                  value: \"Others\"\n                }), \"Others\"]\n              })]\n            }), /*#__PURE__*/_jsx(AsyncMap, {\n              googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDPgRKAUNl2uKfGyLSxfcXLKS2hT0v3h7Y&libraries=places&country=in\",\n              loadingElement: /*#__PURE__*/_jsx(\"div\", {\n                style: {\n                  height: \"100%\"\n                }\n              }),\n              containerElement: /*#__PURE__*/_jsx(\"div\", {\n                style: {\n                  height: '300px'\n                }\n              }),\n              mapElement: /*#__PURE__*/_jsx(\"div\", {\n                style: {\n                  height: \"100%\"\n                }\n              })\n            }), /*#__PURE__*/_jsx(\"div\", {\n              children: /*#__PURE__*/_jsx(\"input\", {\n                type: \"submit\",\n                value: \"Add Location\"\n              })\n            })]\n          }) : '', /*#__PURE__*/_jsx(Autocomplete, {\n            style: {\n              width: '100%',\n              height: '40px',\n              paddingLeft: '16px',\n              marginTop: '2px',\n              marginBottom: '100px'\n            },\n            onPlaceSelected: this.onPlaceSelected,\n            types: ['(regions)']\n          })]\n        });\n      } else {\n        map = /*#__PURE__*/_jsx(\"div\", {\n          style: {\n            height: this.props.height\n          }\n        });\n      }\n\n      return map;\n    }\n  }]);\n\n  return Map;\n}(React.Component);\n\nexport default Map;","map":null,"metadata":{},"sourceType":"module"}