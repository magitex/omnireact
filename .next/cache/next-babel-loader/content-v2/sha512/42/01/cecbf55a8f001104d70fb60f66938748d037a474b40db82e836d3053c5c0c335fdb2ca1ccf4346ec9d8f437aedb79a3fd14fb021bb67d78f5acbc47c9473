{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport { withGoogleMap, GoogleMap, withScriptjs, InfoWindow, Marker } from \"react-google-maps\";\nimport Autocomplete from 'react-google-autocomplete';\nimport Geocode from \"react-geocode\";\nimport Helper from '~/components/helpers/networks';\nimport { HomeContext } from '~/components/helpers/context';\nimport { notification } from 'antd';\nGeocode.setApiKey(\"AIzaSyDPgRKAUNl2uKfGyLSxfcXLKS2hT0v3h7Y\"); //Geocode.enableDebug();\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getCity\", addressArray => {\n      let city = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0] && 'administrative_area_level_2' === addressArray[i].types[0]) {\n          city = addressArray[i].long_name;\n          return city;\n        }\n      }\n    });\n\n    _defineProperty(this, \"getArea\", addressArray => {\n      let area = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        if (addressArray[i].types[0]) {\n          for (let j = 0; j < addressArray[i].types.length; j++) {\n            if ('sublocality_level_1' === addressArray[i].types[j] || 'locality' === addressArray[i].types[j]) {\n              area = addressArray[i].long_name;\n              return area;\n            }\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"getState\", addressArray => {\n      let state = '';\n\n      for (let i = 0; i < addressArray.length; i++) {\n        for (let i = 0; i < addressArray.length; i++) {\n          if (addressArray[i].types[0] && 'administrative_area_level_1' === addressArray[i].types[0]) {\n            state = addressArray[i].long_name;\n            return state;\n          }\n        }\n      }\n    });\n\n    _defineProperty(this, \"onChange\", event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    });\n\n    _defineProperty(this, \"onInfoWindowClose\", event => {});\n\n    _defineProperty(this, \"onPlaceSelected\", place => {\n      const address = place.formatted_address,\n            addressArray = place.address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray),\n            latValue = place.geometry.location.lat(),\n            lngValue = place.geometry.location.lng(); // Set these values in the state.\n\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : '',\n        markerPosition: {\n          lat: latValue,\n          lng: lngValue\n        },\n        mapPosition: {\n          lat: latValue,\n          lng: lngValue\n        }\n      });\n    });\n\n    _defineProperty(this, \"modalSuccess\", type => {\n      notification[type]({\n        message: 'Success',\n        description: 'This address is saved!',\n        duration: 1\n      });\n    });\n\n    _defineProperty(this, \"onMarkerDragEnd\", event => {\n      console.log('event', event);\n      let newLat = event.latLng.lat(),\n          newLng = event.latLng.lng(),\n          addressArray = [];\n      Geocode.fromLatLng(newLat, newLng).then(response => {\n        const address = response.results[0].formatted_address,\n              addressArray = response.results[0].address_components,\n              city = this.getCity(addressArray),\n              area = this.getArea(addressArray),\n              state = this.getState(addressArray);\n        this.setState({\n          address: address ? address : '',\n          area: area ? area : '',\n          city: city ? city : '',\n          state: state ? state : ''\n        });\n      }, error => {\n        console.error(error);\n      });\n    });\n\n    this.state = {\n      address: '',\n      city: '',\n      area: '',\n      state: '',\n      type: '',\n      mapPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      },\n      markerPosition: {\n        lat: this.props.center.lat,\n        lng: this.props.center.lng\n      }\n    };\n  }\n  /**\r\n  * Get the current address from the default map position and set those values in the state\r\n  */\n\n\n  componentDidMount() {\n    Geocode.fromLatLng(this.state.mapPosition.lat, this.state.mapPosition.lng).then(response => {\n      const address = response.results[0].formatted_address,\n            addressArray = response.results[0].address_components,\n            city = this.getCity(addressArray),\n            area = this.getArea(addressArray),\n            state = this.getState(addressArray);\n      console.log('city', city, area, state);\n      this.setState({\n        address: address ? address : '',\n        area: area ? area : '',\n        city: city ? city : '',\n        state: state ? state : ''\n      });\n    }, error => {\n      console.error(error);\n    });\n  }\n\n  /**\r\n  * Component should only update ( meaning re-render ), when the user selects the address, or drags the pin\r\n  *\r\n  * @param nextProps\r\n  * @param nextState\r\n  * @return {boolean}\r\n  */\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.markerPosition.lat !== this.props.center.lat || this.state.address !== nextState.address || this.state.city !== nextState.city || this.state.area !== nextState.area || this.state.state !== nextState.state) {\n      return true;\n    } else if (this.props.center.lat === nextProps.center.lat) {\n      return false;\n    }\n  }\n  /**\r\n  * Get the city and set the city input value to the one selected\r\n  *\r\n  * @param addressArray\r\n  * @return {string}\r\n  */\n\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const token = Helper.getToken();\n    data = Helper.saveUserAddress(this.state);\n    console.log('city', this.state);\n    console.log('return', data);\n    modalSuccess('success');\n    this.clearForm();\n  }\n\n  render() {\n    const AsyncMap = withScriptjs(withGoogleMap(props => /*#__PURE__*/_jsxs(GoogleMap, {\n      google: this.props.google,\n      defaultZoom: this.props.zoom,\n      defaultCenter: {\n        lat: this.state.mapPosition.lat,\n        lng: this.state.mapPosition.lng\n      },\n      children: [/*#__PURE__*/_jsx(Autocomplete, {\n        style: {\n          width: '100%',\n          height: '40px',\n          paddingLeft: '16px',\n          marginTop: '2px',\n          marginBottom: '100px'\n        },\n        onPlaceSelected: this.onPlaceSelected,\n        types: ['(regions)']\n      }), /*#__PURE__*/_jsx(Marker, {\n        google: this.props.google,\n        name: 'Dolores park',\n        draggable: true,\n        onDragEnd: this.onMarkerDragEnd,\n        position: {\n          lat: this.state.markerPosition.lat,\n          lng: this.state.markerPosition.lng\n        }\n      }), /*#__PURE__*/_jsx(Marker, {}), /*#__PURE__*/_jsx(InfoWindow, {\n        onClose: this.onInfoWindowClose,\n        position: {\n          lat: this.state.markerPosition.lat + 0.0018,\n          lng: this.state.markerPosition.lng\n        },\n        children: /*#__PURE__*/_jsx(\"div\", {\n          children: /*#__PURE__*/_jsx(\"span\", {\n            style: {\n              padding: 0,\n              margin: 0\n            },\n            children: this.state.address\n          })\n        })\n      })]\n    })));\n    let map;\n\n    if (this.props.center.lat !== undefined) {\n      map = /*#__PURE__*/_jsx(\"div\", {\n        children: /*#__PURE__*/_jsxs(\"form\", {\n          onSubmit: this.handleSubmit,\n          children: [/*#__PURE__*/_jsxs(\"div\", {\n            children: [/*#__PURE__*/_jsxs(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsx(\"label\", {\n                htmlFor: \"\",\n                children: \"City\"\n              }), /*#__PURE__*/_jsx(\"input\", {\n                type: \"text\",\n                name: \"city\",\n                className: \"form-control\",\n                onChange: this.onChange,\n                readOnly: \"readOnly\",\n                value: this.state.city\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsx(\"label\", {\n                htmlFor: \"\",\n                children: \"Area\"\n              }), /*#__PURE__*/_jsx(\"input\", {\n                type: \"text\",\n                name: \"area\",\n                className: \"form-control\",\n                onChange: this.onChange,\n                readOnly: \"readOnly\",\n                value: this.state.area\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsx(\"label\", {\n                htmlFor: \"\",\n                children: \"State\"\n              }), /*#__PURE__*/_jsx(\"input\", {\n                type: \"text\",\n                name: \"state\",\n                className: \"form-control\",\n                onChange: this.onChange,\n                readOnly: \"readOnly\",\n                value: this.state.state\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsx(\"label\", {\n                htmlFor: \"\",\n                children: \"Address\"\n              }), /*#__PURE__*/_jsx(\"input\", {\n                type: \"text\",\n                name: \"address\",\n                className: \"form-control\",\n                onChange: this.onChange,\n                readOnly: \"readOnly\",\n                value: this.state.address\n              })]\n            }), /*#__PURE__*/_jsxs(\"div\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsx(\"label\", {\n                htmlFor: \"\",\n                children: \"Address Save As\"\n              }), /*#__PURE__*/_jsx(\"input\", {\n                type: \"radio\",\n                name: \"type\",\n                className: \"form-control\",\n                onChange: this.onChange,\n                value: \"Home\",\n                checked: true\n              }), \"Home \", /*#__PURE__*/_jsx(\"input\", {\n                type: \"radio\",\n                name: \"type\",\n                className: \"form-control\",\n                onChange: this.onChange,\n                value: \"Work\"\n              }), \"Work\", /*#__PURE__*/_jsx(\"input\", {\n                type: \"radio\",\n                name: \"type\",\n                className: \"form-control\",\n                onChange: this.onChange,\n                value: \"Others\"\n              }), \"Others\"]\n            })]\n          }), /*#__PURE__*/_jsx(AsyncMap, {\n            googleMapURL: \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDPgRKAUNl2uKfGyLSxfcXLKS2hT0v3h7Y&libraries=places&country=in\",\n            loadingElement: /*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: `100%`\n              }\n            }),\n            containerElement: /*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: this.props.height\n              }\n            }),\n            mapElement: /*#__PURE__*/_jsx(\"div\", {\n              style: {\n                height: `100%`\n              }\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(\"input\", {\n              type: \"button\",\n              value: \"Add Location\"\n            })\n          })]\n        })\n      });\n    } else {\n      map = /*#__PURE__*/_jsx(\"div\", {\n        style: {\n          height: this.props.height\n        }\n      });\n    }\n\n    return map;\n  }\n\n}\n\nexport default Map;","map":null,"metadata":{},"sourceType":"module"}