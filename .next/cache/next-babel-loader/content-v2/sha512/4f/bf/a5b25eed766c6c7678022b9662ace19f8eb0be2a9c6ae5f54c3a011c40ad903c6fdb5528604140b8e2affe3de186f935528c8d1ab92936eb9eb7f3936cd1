{"ast":null,"code":"import React, { Component } from 'react';\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\nconst requestOptions = {\n  headers: 'Access-Control-Allow-Origin: *'\n};\nexport class GoogleComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      collection: null,\n      collectionShow: false,\n      place: '',\n      allowCountry: '',\n      location: '',\n      returnData: {},\n      currentLocation: '',\n      currentCoordinates: {},\n      liStyle: '',\n      proxyUrl: \" \"\n    };\n  }\n\n  async componentDidMount() {\n    await this.setState({\n      liStyle: this.props.locationListStyle ? this.props.locationListStyle : 'style-list'\n    });\n\n    let _ico = /*#__PURE__*/React.createElement(\"img\", {\n      className: 'current-loc-ico',\n      src: \"https://www.materialui.co/materialIcons/maps/my_location_black_192x192.png\"\n    });\n\n    let _current = /*#__PURE__*/React.createElement(\"li\", {\n      className: this.state.liStyle,\n      onClick: () => this.getCurrentLocation()\n    }, _ico, \"Current Location\");\n\n    this.setState({\n      currentLocation: _current\n    });\n    document.addEventListener(\"mousedown\", e => this.handleClickOutside(e));\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", e => this.handleClickOutside(e));\n  }\n\n  setWrapperRef(node) {\n    this.wrapperRef = node;\n  }\n\n  handleClickOutside(event) {\n    if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\n      this.setState({\n        collectionShow: false\n      });\n    }\n  }\n\n  getInfo(param) {\n    let child = [];\n\n    let _co = this.props.country ? 'components=' + this.props.country + '&' : '';\n\n    let _lang = this.props.language ? 'language=' + this.props.language + '&' : '';\n\n    if (this.props.apiKey) {\n      let _fire = fetch(proxyUrl + 'https://maps.googleapis.com/maps/api/place/autocomplete/json?input=' + param + '&' + _lang + _co + '&key=' + this.props.apiKey);\n\n      _fire.then(dataJson => {\n        return dataJson.json().then(data => {\n          if (data.status == \"OK\" && data.predictions.length > 0) {\n            for (let loc = 0; loc < data.predictions.length; loc++) {\n              child.push( /*#__PURE__*/React.createElement(\"li\", {\n                key: loc,\n                className: this.state.liStyle,\n                onClick: () => this.arrangeList(data.predictions[loc].description)\n              }, data.predictions[loc].description));\n            }\n          } else if (data.state == \"REQUEST_DENIED\") {\n            child.push( /*#__PURE__*/React.createElement(\"li\", {\n              className: this.state.liStyle\n            }, data.error_message));\n          } else {\n            child.push( /*#__PURE__*/React.createElement(\"li\", {\n              className: this.state.liStyle\n            }, \"NO Result Found\"));\n          }\n\n          let collection = /*#__PURE__*/React.createElement(\"ul\", {\n            className: 'style-unordered-list'\n          }, child);\n          this.setState({\n            collection: collection,\n            collectionShow: true\n          });\n        });\n      }).catch(error => {\n        this.setState({\n          proxyUrl: proxyUrl\n        });\n      });\n    } else {\n      child.push( /*#__PURE__*/React.createElement(\"li\", {\n        className: this.state.liStyle\n      }, \"No Api Key Provided\"));\n      let collection = /*#__PURE__*/React.createElement(\"ul\", {\n        className: 'style-unordered-list'\n      }, child);\n      this.setState({\n        collection: collection,\n        collectionShow: true\n      });\n    }\n  }\n\n  getCoordinates(address) {\n    if (this.props.apiKey) {\n      let _fire = fetch(proxyUrl + 'https://maps.googleapis.com/maps/api/geocode/json?address=' + address + '&key=' + this.props.apiKey);\n\n      return _fire.then(resp => {\n        return resp.json().then(res => {\n          return res;\n        });\n      }).catch(error => {\n        this.setState({\n          proxyUrl: proxyUrl\n        });\n      });\n    }\n  }\n\n  getCurrentLocation() {\n    if (this.props.apiKey) {\n      navigator.geolocation.getCurrentPosition(location => {\n        var obj = \"latlng=\" + location.coords.latitude + \",\" + location.coords.longitude;\n\n        let _fire = fetch(proxyUrl + 'https://maps.googleapis.com/maps/api/geocode/json?' + obj + '&key=' + this.props.apiKey);\n\n        return _fire.then(resp => {\n          return resp.json().then(res => {\n            this._returnData(res.results[0].formatted_address);\n\n            this.setState({\n              collectionShow: false\n            });\n          });\n        }).catch(error => {\n          this.setState({\n            proxyUrl: proxyUrl\n          });\n        });\n      });\n    }\n  }\n\n  arrangeList(place) {\n    this._returnData(place);\n\n    this.setState({\n      collectionShow: false\n    });\n  }\n\n  arrangeValue(item) {\n    this.getInfo(item);\n    this.setState({\n      place: item\n    });\n    this.state.returnData.place = item;\n    this.state.returnData.coordinates = \"\";\n\n    if (this.props.onChange) {\n      this.props.onChange(this.state.returnData);\n    }\n  }\n\n  async _returnData(place) {\n    this.setState({\n      place: place\n    });\n    let location = {};\n    location = await this.getCoordinates(place);\n    this.state.returnData.place = place;\n\n    if (this.props.coordinates) {\n      if (location.status == 'OK') {\n        this.state.returnData.coordinates = location.results[0].geometry.location;\n      } else {\n        this.state.returnData.coordinates = \"Error\";\n      }\n    } else {\n      this.state.returnData.coordinates = \"Coordinates return false by props\";\n    }\n\n    if (this.props.onChange) {\n      this.props.onChange(this.state.returnData);\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: 'location-box-cover',\n      ref: node => this.setWrapperRef(node)\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      className: this.props.locationBoxStyle ? this.props.locationBoxStyle : 'location-box',\n      onChange: e => this.arrangeValue(e.target.value),\n      placeholder: 'Start Typing Location',\n      value: this.state.place,\n      title: this.state.place\n    }), this.state.collectionShow ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"google-covert\"\n    }, this.state.currentLocation, this.state.collection) : null);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}