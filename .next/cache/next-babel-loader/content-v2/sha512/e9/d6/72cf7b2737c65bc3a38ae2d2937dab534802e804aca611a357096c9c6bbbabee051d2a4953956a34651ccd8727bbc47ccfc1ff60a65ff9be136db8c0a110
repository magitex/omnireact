{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React, { useEffect, useState } from 'react';\nimport SearchLocationInput from '~/components/shared/headers/modules/SearchLocationInput';\nimport Helper from '~/components/helpers/networks';\nimport { HomeContext } from '~/components/helpers/context';\n\nconst Hyperlocation = props => {\n  const {\n    0: address,\n    1: setaddress\n  } = useState([]);\n  const {\n    0: storeinfo,\n    1: setstoreinfo\n  } = useState([]);\n  const {\n    0: storename,\n    1: setstorename\n  } = useState([]);\n  const {\n    0: userid,\n    1: setuserid\n  } = useState([]);\n\n  async function getaddress() {\n    console.log(\"123 \", localStorage.getItem(\"token\"));\n    let data;\n    const token = await Helper.getToken(); //console.log(\"new token11\",localStorage.getItem(\"token\"));\n\n    data = await Helper.dashboardData();\n    console.log(\"new data\", data);\n    const tempaddress = data && data.data.data.userInfo.userAddress;\n    const tempstoreadress = data && data.data.data.storeAddress;\n    const tempstorename = data && data.data.data.storeName;\n    localStorage.setItem('storename', tempstorename);\n    localStorage.setItem('storeaddress', tempstoreadress);\n    console.log(\"123 address>>\", tempaddress);\n    setaddress(tempaddress);\n    setstoreinfo(tempstoreadress);\n    setstorename(tempstorename);\n  }\n\n  const setdelivery = item => {\n    console.log('deliverymethod', item);\n    localStorage.setItem('deliverymethod', item);\n  };\n\n  const setlat = (lat, long, address, state, city, addresstype) => {\n    localStorage.setItem('latitude', lat);\n    localStorage.setItem('longitude', long);\n    localStorage.setItem('address', address);\n    localStorage.setItem('state', state);\n    localStorage.setItem('city', city);\n    localStorage.setItem('addresstype', addresstype);\n    console.log('new lat', localStorage.getItem('latitude'));\n    console.log('new longitude', localStorage.getItem('longitude'));\n    window.location.href = '/';\n  };\n\n  useEffect(() => {\n    getaddress();\n    setuserid(window.localStorage.getItem('userID'));\n  }, []); // Views\n\n  let mainCarouselView;\n\n  if (userid !== null) {\n    if (address) {\n      // if (banners) {\n      const carouseItems = address.map((item, key1) =>\n      /*#__PURE__*/\n      // <div className=\"slide-item\" key={item.id}>\n      _jsx(\"div\", {\n        className: \"slide-item\",\n        children: /*#__PURE__*/_jsxs(\"a\", {\n          href: \"#\",\n          onClick: () => setlat(item.endUserlatitude, item.endUserLongitude, item.endUserDeliveraddress, item.endUserStat, item.endUserCity, item.addressType),\n          children: [item.endUserDeliveraddress, \",\", item.endUserStat, \",\", item.endUserCity]\n        })\n      }, key1 + 1));\n      mainCarouselView = carouseItems;\n    }\n  } else {\n    mainCarouselView = '';\n  }\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"popup-box\",\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: \"box\",\n      children: [/*#__PURE__*/_jsx(\"span\", {\n        className: \"close-icon\",\n        onClick: props.handleClose,\n        children: \"x\"\n      }), /*#__PURE__*/_jsx(\"input\", {\n        type: \"button\",\n        value: \"Pickup from store\",\n        onClick: () => setdelivery(1)\n      }), /*#__PURE__*/_jsx(\"input\", {\n        type: \"button\",\n        value: \"Home Delivery\",\n        onClick: () => setdelivery(2)\n      }), /*#__PURE__*/_jsx(SearchLocationInput, {}), /*#__PURE__*/_jsx(\"div\", {}), mainCarouselView]\n    })\n  });\n};\n\nexport default Hyperlocation;","map":null,"metadata":{},"sourceType":"module"}