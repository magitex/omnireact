{"ast":null,"code":"import config from './config';\nimport axios from 'axios';\n\nvar qs = require('qs');\n\nconst serverUrl = config.baseUrl;\nif (false) if (window.localStorage.getItem('token') !== null) {\n  axios.defaults.headers.common['Authorization'] = localStorage.getItem('token_type') + ' ' + localStorage.getItem('token');\n  axios.defaults.headers.common['Content-Type'] = 'application/x-www-form-urlencoded';\n}\nconst Network = {\n  getToken: async () => {\n    return new Promise((resolve, reject) => {\n      var data = qs.stringify({\n        grant_type: 'client_credentials'\n      });\n      axios({\n        url: serverUrl + config.auth,\n        method: 'post',\n        data: data,\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded',\n          Authorization: 'Basic ' + btoa('mobile:pin')\n        }\n      }).then(data => {\n        console.log('data', data.data);\n        const authData = data.data;\n        localStorage.setItem('token', authData.access_token);\n        localStorage.setItem('token_type', authData.token_type);\n        axios.defaults.headers.common['Authorization'] = localStorage.getItem('token_type') + ' ' + localStorage.getItem('token');\n        axios.defaults.headers.common['Content-Type'] = 'application/x-www-form-urlencoded';\n        return resolve(data); // localStorage.setItem()\n      }).catch(err => reject(err));\n    });\n  },\n  dashboardData: async () => {\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(function (position) {\n        localStorage.setItem('latitude', position.coords.latitude);\n        localStorage.setItem('longitude', position.coords.longitude);\n        console.log(\"Latitude is :\", localStorage.getItem('latitude'));\n        console.log(\"Longitude is :\", localStorage.getItem('longitude'));\n      });\n      var data = {\n        channelId: 1,\n        customerId: 1,\n        language: 'ENG',\n        userId: 2,\n        latitude: localStorage.getItem('latitude'),\n        longitude: localStorage.getItem('longitude'),\n        storeId: 1\n      };\n      axios({\n        url: serverUrl + config.dashboardData,\n        method: 'post',\n        data: data,\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('token') + '',\n          'Content-Type': 'application/json'\n        }\n      }).then(data => {\n        resolve(data);\n      }).catch(err => reject(err));\n    });\n  }\n};\nexport default Network;","map":{"version":3,"sources":["/Users/trilokeshnaskar/Desktop/omni-server/stormy-dusk-22997/components/helpers/networks.js"],"names":["config","axios","qs","require","serverUrl","baseUrl","window","localStorage","getItem","defaults","headers","common","Network","getToken","Promise","resolve","reject","data","stringify","grant_type","url","auth","method","Authorization","btoa","then","console","log","authData","setItem","access_token","token_type","catch","err","dashboardData","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","channelId","customerId","language","userId","storeId"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,IAAIC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,MAAMC,SAAS,GAAGJ,MAAM,CAACK,OAAzB;AACA,WACI,IAAIC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,MAAyC,IAA7C,EAAmD;AAC/CP,EAAAA,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IACIJ,YAAY,CAACC,OAAb,CAAqB,YAArB,IACA,GADA,GAEAD,YAAY,CAACC,OAAb,CAAqB,OAArB,CAHJ;AAIAP,EAAAA,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,cAA9B,IACI,mCADJ;AAEH;AAEL,MAAMC,OAAO,GAAG;AACZC,EAAAA,QAAQ,EAAE,YAAY;AAClB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,UAAIC,IAAI,GAAGf,EAAE,CAACgB,SAAH,CAAa;AACpBC,QAAAA,UAAU,EAAE;AADQ,OAAb,CAAX;AAGAlB,MAAAA,KAAK,CAAC;AACFmB,QAAAA,GAAG,EAAEhB,SAAS,GAAGJ,MAAM,CAACqB,IADtB;AAEFC,QAAAA,MAAM,EAAE,MAFN;AAGFL,QAAAA,IAAI,EAAEA,IAHJ;AAIFP,QAAAA,OAAO,EAAE;AACL,0BAAgB,mCADX;AAELa,UAAAA,aAAa,EAAE,WAAWC,IAAI,CAAC,YAAD;AAFzB;AAJP,OAAD,CAAL,CASKC,IATL,CASWR,IAAD,IAAU;AACZS,QAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBV,IAAI,CAACA,IAAzB;AACA,cAAMW,QAAQ,GAAGX,IAAI,CAACA,IAAtB;AACAV,QAAAA,YAAY,CAACsB,OAAb,CAAqB,OAArB,EAA8BD,QAAQ,CAACE,YAAvC;AACAvB,QAAAA,YAAY,CAACsB,OAAb,CAAqB,YAArB,EAAmCD,QAAQ,CAACG,UAA5C;AACA9B,QAAAA,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,eAA9B,IACIJ,YAAY,CAACC,OAAb,CAAqB,YAArB,IACA,GADA,GAEAD,YAAY,CAACC,OAAb,CAAqB,OAArB,CAHJ;AAIAP,QAAAA,KAAK,CAACQ,QAAN,CAAeC,OAAf,CAAuBC,MAAvB,CAA8B,cAA9B,IACI,mCADJ;AAEA,eAAOI,OAAO,CAACE,IAAD,CAAd,CAXY,CAYZ;AACH,OAtBL,EAuBKe,KAvBL,CAuBYC,GAAD,IAASjB,MAAM,CAACiB,GAAD,CAvB1B;AAwBH,KA5BM,CAAP;AA6BH,GA/BW;AAgCZC,EAAAA,aAAa,EAAE,YAAY;AACvB,WAAO,IAAIpB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAEpCmB,MAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyC,UAASC,QAAT,EAAmB;AACxD/B,QAAAA,YAAY,CAACsB,OAAb,CAAqB,UAArB,EAAiCS,QAAQ,CAACC,MAAT,CAAgBC,QAAjD;AACIjC,QAAAA,YAAY,CAACsB,OAAb,CAAqB,WAArB,EAAkCS,QAAQ,CAACC,MAAT,CAAgBE,SAAlD;AACJf,QAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BpB,YAAY,CAACC,OAAb,CAAqB,UAArB,CAA7B;AACAkB,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BpB,YAAY,CAACC,OAAb,CAAqB,WAArB,CAA7B;AACD,OALH;AAMA,UAAIS,IAAI,GAAG;AACPyB,QAAAA,SAAS,EAAE,CADJ;AAEPC,QAAAA,UAAU,EAAE,CAFL;AAGPC,QAAAA,QAAQ,EAAE,KAHH;AAIPC,QAAAA,MAAM,EAAE,CAJD;AAKPL,QAAAA,QAAQ,EAAEjC,YAAY,CAACC,OAAb,CAAqB,UAArB,CALH;AAMPiC,QAAAA,SAAS,EAAElC,YAAY,CAACC,OAAb,CAAqB,WAArB,CANJ;AAOPsC,QAAAA,OAAO,EAAE;AAPF,OAAX;AASA7C,MAAAA,KAAK,CAAC;AACFmB,QAAAA,GAAG,EAAEhB,SAAS,GAAGJ,MAAM,CAACkC,aADtB;AAEFZ,QAAAA,MAAM,EAAE,MAFN;AAGFL,QAAAA,IAAI,EAAEA,IAHJ;AAIFP,QAAAA,OAAO,EAAE;AACL,2BAAiB,YAAUH,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAV,GAAwC,EADpD;AAEL,0BAAgB;AAFX;AAJP,OAAD,CAAL,CASKiB,IATL,CASWR,IAAD,IAAU;AACZF,QAAAA,OAAO,CAACE,IAAD,CAAP;AACH,OAXL,EAYKe,KAZL,CAYYC,GAAD,IAASjB,MAAM,CAACiB,GAAD,CAZ1B;AAaH,KA9BM,CAAP;AA+BH;AAhEW,CAAhB;AAmEA,eAAerB,OAAf","sourcesContent":["import config from './config';\nimport axios from 'axios';\nvar qs = require('qs');\nconst serverUrl = config.baseUrl;\nif (typeof window !== 'undefined')\n    if (window.localStorage.getItem('token') !== null) {\n        axios.defaults.headers.common['Authorization'] =\n            localStorage.getItem('token_type') +\n            ' ' +\n            localStorage.getItem('token');\n        axios.defaults.headers.common['Content-Type'] =\n            'application/x-www-form-urlencoded';\n    }\n\nconst Network = {\n    getToken: async () => {\n        return new Promise((resolve, reject) => {\n            var data = qs.stringify({\n                grant_type: 'client_credentials',\n            });\n            axios({\n                url: serverUrl + config.auth,\n                method: 'post',\n                data: data,\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    Authorization: 'Basic ' + btoa('mobile:pin'),\n                },\n            })\n                .then((data) => {\n                    console.log('data', data.data);\n                    const authData = data.data;\n                    localStorage.setItem('token', authData.access_token);\n                    localStorage.setItem('token_type', authData.token_type);\n                    axios.defaults.headers.common['Authorization'] =\n                        localStorage.getItem('token_type') +\n                        ' ' +\n                        localStorage.getItem('token');\n                    axios.defaults.headers.common['Content-Type'] =\n                        'application/x-www-form-urlencoded';\n                    return resolve(data);\n                    // localStorage.setItem()\n                })\n                .catch((err) => reject(err));\n        });\n    },\n    dashboardData: async () => {\n        return new Promise((resolve, reject) => {\n           \n            navigator.geolocation.getCurrentPosition(function(position) {\n                localStorage.setItem('latitude', position.coords.latitude);\n                    localStorage.setItem('longitude', position.coords.longitude);\n                console.log(\"Latitude is :\", localStorage.getItem('latitude'));\n                console.log(\"Longitude is :\",localStorage.getItem('longitude'));\n              });\n            var data = {\n                channelId: 1,\n                customerId: 1,\n                language: 'ENG',\n                userId: 2,\n                latitude: localStorage.getItem('latitude'),\n                longitude: localStorage.getItem('longitude'),\n                storeId: 1,\n            };\n            axios({\n                url: serverUrl + config.dashboardData,\n                method: 'post',\n                data: data,\n                headers: { \n                    'Authorization': 'Bearer '+localStorage.getItem('token')+'', \n                    'Content-Type': 'application/json'\n                  },\n            })\n                .then((data) => {\n                    resolve(data);\n                })\n                .catch((err) => reject(err));\n        });\n    },\n};\n\nexport default Network;\n"]},"metadata":{},"sourceType":"module"}